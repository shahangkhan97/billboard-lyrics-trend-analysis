# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WLMNF4TpMBUBYZFRmYuie7PZxAWJwuzh
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud, STOPWORDS
from textblob import TextBlob
import plotly.express as px
import plotly.graph_objects as go
from collections import Counter
import re
import nltk
from nltk.corpus import stopwords
from nltk.stem import WordNetLemmatizer

# Download NLTK resources
nltk.download('punkt')
nltk.download('stopwords')
nltk.download('wordnet')
nltk.download('averaged_perceptron_tagger')

# Page configuration
st.set_page_config(
    page_title="Billboard Lyrics Analysis",
    page_icon="ðŸŽµ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load data with caching
@st.cache_data
def load_data():
    return pd.read_csv('billboard_hot100_cleaned.csv')

df = load_data()

# Add decades column
df['decade'] = (df['Year'] // 10) * 10

# Calculate sentiment if not already in dataset
if 'sentiment' not in df.columns:
    df['sentiment'] = df['Lyrics_Cleaned'].apply(
        lambda x: TextBlob(str(x)).sentiment.polarity if pd.notnull(x) else 0
    )

# Add song age
current_year = 2024
df['years_ago'] = current_year - df['Year']

# Pre-calculate genre counts
genre_counts = df['consolidated_genre'].value_counts().reset_index()
genre_counts.columns = ['Genre', 'Song Count']

# Custom stopwords for word clouds
extra_stopwords = set(['oh', 'yeah', 'hey', 'la', 'da', 'uh', 'na', 'ha', 'ooh', 'woo', 'hoo', 'chorus', 'verse']) | set(STOPWORDS)

# =========================================
# Sidebar - Filters
# =========================================
st.sidebar.title("Billboard Lyrics Explorer")
st.sidebar.image("https://upload.wikimedia.org/wikipedia/commons/thumb/2/2b/Billboard_Hot_100_logo.jpg/320px-Billboard_Hot_100_logo.jpg", width=200)
st.sidebar.markdown("Analyzing 65 years of popular music lyrics (1959-2024)")

# Year range filter
years = st.sidebar.slider(
    "Select Year Range",
    min_value=1959,
    max_value=2024,
    value=(1959, 2024))
st.sidebar.caption(f"Selected: {years[0]} - {years[1]}")

# Genre filter
all_genres = df['consolidated_genre'].unique()
selected_genres = st.sidebar.multiselect(
    "Select Genres",
    options=all_genres,
    default=all_genres[:5] if len(all_genres) > 5 else all_genres
)

# Profanity filter
profanity_option = st.sidebar.radio(
    "Profanity Filter:",
    options=["All Songs", "Only Explicit Songs", "No Explicit Songs"],
    index=0
)

# Artist search
artist_query = st.sidebar.text_input("Search Artist:")

# Apply filters
filtered_df = df[
    (df['Year'] >= years[0]) &
    (df['Year'] <= years[1]) &
    (df['consolidated_genre'].isin(selected_genres))
]

if profanity_option == "Only Explicit Songs":
    filtered_df = filtered_df[filtered_df['contains_profanity']]
elif profanity_option == "No Explicit Songs":
    filtered_df = filtered_df[~filtered_df['contains_profanity']]

if artist_query:
    filtered_df = filtered_df[
        filtered_df['Artist'].str.contains(artist_query, case=False)
    ]

# =========================================
# Main Content
# =========================================
st.title("ðŸ“€ Billboard Hot 100 Lyrics Analysis (1959-2024)")
st.subheader(f"Analyzing {len(filtered_df)} songs from {years[0]} to {years[1]}")

# Key metrics
col1, col2, col3, col4 = st.columns(4)
col1.metric("Total Songs", len(filtered_df))
col2.metric("Artists", filtered_df['Artist'].nunique())
col3.metric("Genres", filtered_df['consolidated_genre'].nunique())
explicit_percent = (filtered_df['contains_profanity'].sum() / len(filtered_df)) * 100 if len(filtered_df) > 0 else 0
col4.metric("Explicit Content", f"{explicit_percent:.1f}%")

st.divider()

# =========================================
# Tabs for different analyses
# =========================================
tab1, tab2, tab3, tab4, tab5 = st.tabs(
    ["Genre Trends", "Lyric Analysis", "Profanity Insights", "Artist Spotlight", "Song Explorer"]
)

with tab1:
    # Genre evolution chart
    st.subheader("Genre Evolution Over Time")
    genre_yearly = filtered_df.groupby(['Year', 'consolidated_genre']).size().unstack().fillna(0)
    fig = px.area(
        genre_yearly,
        title="Genre Popularity by Year",
        labels={'value': 'Number of Songs', 'Year': 'Year'},
        height=500
    )
    fig.update_layout(legend_title_text='Genre')
    st.plotly_chart(fig, use_container_width=True)

    # Genre distribution by decade
    st.subheader("Genre Distribution by Decade")
    decade_genre = filtered_df.groupby(['decade', 'consolidated_genre']).size().unstack()
    fig = px.bar(
        decade_genre,
        barmode='stack',
        title="Genre Distribution by Decade",
        labels={'value': 'Number of Songs', 'decade': 'Decade'},
        height=500
    )
    st.plotly_chart(fig, use_container_width=True)

with tab2:
    # Word clouds
    st.subheader("Lyrical Themes by Genre")
    col1, col2 = st.columns(2)

    with col1:
        genre = st.selectbox("Select Genre for Word Cloud:", filtered_df['consolidated_genre'].unique())

    with col2:
        max_words = st.slider("Max Words in Cloud", 50, 300, 150)

    genre_df = filtered_df[filtered_df['consolidated_genre'] == genre]
    if not genre_df.empty:
        texts = genre_df['Lyrics_Cleaned'].fillna('').astype(str).tolist()
        text_corpus = " ".join(texts).lower()

        if text_corpus.strip():
            wc = WordCloud(
                width=800,
                height=400,
                background_color='white',
                stopwords=extra_stopwords,
                max_words=max_words,
                colormap='viridis'
            ).generate(text_corpus)

            fig, ax = plt.subplots(figsize=(10, 5))
            ax.imshow(wc, interpolation='bilinear')
            ax.axis('off')
            ax.set_title(f'Common Words in {genre} Lyrics', fontsize=16)
            st.pyplot(fig)
            st.caption(f"Based on {len(genre_df)} songs")
        else:
            st.warning(f"No lyrics available for {genre}")
    else:
        st.warning(f"No songs found for {genre} with current filters")

    # Sentiment analysis
    st.subheader("Sentiment Analysis")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Sentiment Over Time**")
        sentiment_trend = filtered_df.groupby('Year')['sentiment'].mean().reset_index()
        fig = px.line(
            sentiment_trend,
            x='Year',
            y='sentiment',
            title="Average Lyric Sentiment by Year",
            height=400
        )
        fig.update_traces(line=dict(color='purple', width=3))
        fig.update_layout(yaxis_title="Sentiment Polarity (-1 to 1)")
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.markdown("**Sentiment by Genre**")
        sentiment_genre = filtered_df.groupby('consolidated_genre')['sentiment'].mean().reset_index()
        sentiment_genre = sentiment_genre.sort_values('sentiment', ascending=False)
        fig = px.bar(
            sentiment_genre,
            x='consolidated_genre',
            y='sentiment',
            color='sentiment',
            color_continuous_scale='RdYlGn',
            title="Average Sentiment by Genre",
            height=400
        )
        fig.update_layout(xaxis_title="Genre", yaxis_title="Sentiment Polarity")
        st.plotly_chart(fig, use_container_width=True)

with tab3:
    # Profanity trends
    st.subheader("Explicit Content Trends")
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Profanity Over Time**")
        profanity_trend = filtered_df.groupby('Year')['contains_profanity'].mean().reset_index()
        fig = px.line(
            profanity_trend,
            x='Year',
            y='contains_profanity',
            title="Percentage of Songs with Explicit Content",
            height=400
        )
        fig.update_traces(line=dict(color='red', width=3))
        fig.update_layout(yaxis_title="% of Songs with Profanity", yaxis_tickformat='.0%')
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.markdown("**Profanity by Genre**")
        profanity_genre = filtered_df.groupby('consolidated_genre')['contains_profanity'].mean().reset_index()
        profanity_genre = profanity_genre.sort_values('contains_profanity', ascending=False)
        fig = px.bar(
            profanity_genre,
            x='consolidated_genre',
            y='contains_profanity',
            color='contains_profanity',
            color_continuous_scale='Reds',
            title="Explicit Content by Genre",
            height=400
        )
        fig.update_layout(xaxis_title="Genre", yaxis_title="% with Profanity", yaxis_tickformat='.0%')
        st.plotly_chart(fig, use_container_width=True)

    # Top explicit songs
    st.subheader("Most Explicit Songs")
    explicit_songs = filtered_df[filtered_df['profanity_count'] > 0].sort_values('profanity_count', ascending=False)
    if not explicit_songs.empty:
        top_explicit = explicit_songs.head(10)[['Year', 'Title', 'Artist', 'consolidated_genre', 'profanity_count']]
        st.dataframe(top_explicit, height=350)
    else:
        st.info("No explicit songs found with current filters")

with tab4:
    # Artist analysis
    st.subheader("Artist Spotlight")

    # Top artists
    col1, col2 = st.columns(2)

    with col1:
        st.markdown("**Top Artists by Hits**")
        top_artists = filtered_df['Artist'].value_counts().head(10).reset_index()
        top_artists.columns = ['Artist', 'Song Count']
        fig = px.bar(
            top_artists,
            x='Artist',
            y='Song Count',
            color='Song Count',
            color_continuous_scale='Blues',
            title="Most Frequent Artists",
            height=400
        )
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        st.markdown("**Artist Timeline**")
        artist = st.selectbox("Select Artist:", filtered_df['Artist'].unique())
        artist_df = filtered_df[filtered_df['Artist'] == artist]

        if not artist_df.empty:
            fig = px.scatter(
                artist_df,
                x='Year',
                y='Rank',
                size='profanity_count',
                color='consolidated_genre',
                hover_data=['Title'],
                title=f"{artist}'s Billboard Hits",
                height=400
            )
            fig.update_yaxes(autorange="reversed")
            fig.update_layout(yaxis_title="Chart Position (Rank)")
            st.plotly_chart(fig, use_container_width=True)
        else:
            st.warning("No songs found for this artist with current filters")

with tab5:
    # Song explorer
    st.subheader("Song Explorer")

    # Search functionality
    col1, col2 = st.columns(2)

    with col1:
        search_term = st.text_input("Search song titles:")

    with col2:
        year_filter = st.slider("Filter by year", 1959, 2024, (1959, 2024))

    # Apply search filters
    search_df = filtered_df.copy()
    if search_term:
        search_df = search_df[search_df['Title'].str.contains(search_term, case=False)]
    search_df = search_df[(search_df['Year'] >= year_filter[0]) & (search_df['Year'] <= year_filter[1])]

    if not search_df.empty:
        # Display song list
        st.dataframe(
            search_df[['Year', 'Title', 'Artist', 'consolidated_genre', 'profanity_count', 'sentiment']].sort_values('Year', ascending=False),
            height=400,
            hide_index=True
        )

        # Song details
        selected_idx = st.selectbox("Select a song for details:", search_df.index)
        song = df.loc[selected_idx]

        st.subheader(f"{song['Title']} by {song['Artist']} ({song['Year']})")

        col1, col2, col3 = st.columns(3)
        col1.metric("Genre", song['consolidated_genre'])
        col2.metric("Chart Position", f"#{song['Rank']}")
        col3.metric("Profanity Count", song['profanity_count'])

        # Sentiment gauge
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=song['sentiment'],
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "Sentiment"},
            gauge={
                'axis': {'range': [-1, 1]},
                'bar': {'color': "purple"},
                'steps': [
                    {'range': [-1, -0.5], 'color': "red"},
                    {'range': [-0.5, 0.5], 'color': "lightgray"},
                    {'range': [0.5, 1], 'color': "green"}
                ]
        }))
        fig.update_layout(height=250)
        st.plotly_chart(fig, use_container_width=True)

        # Lyrics display
        with st.expander("View Lyrics"):
            if pd.isna(song['Lyrics']) or song['Lyrics'].strip() == "":
                st.warning("Lyrics not available for this song")
            else:
                st.text(song['Lyrics'])
    else:
        st.warning("No songs match your search criteria")

# =========================================
# Footer
# =========================================
st.divider()
st.markdown("""
**Data Source**: Billboard Year-End Hot 100 (1959-2024)
**Methodology**: Lyrics collected via lyrics.ovh API, genres classified using DeepSeek API
**Note**: Lyrics not available for all songs (1088 missing)
""")